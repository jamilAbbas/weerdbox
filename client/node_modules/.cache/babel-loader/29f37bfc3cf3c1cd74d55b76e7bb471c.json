{"ast":null,"code":"import \"antd/es/row/style/css\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style/css\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/message/style/css\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/button/style/css\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/checkbox/style/css\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/form/style/css\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"/home/engintech/project/stonebird/Blotter/weerdboxbackend/client/src/containers/Register/index.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { signUpRequest } from \"./actions\";\nimport \"./styles.css\";\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n      isReg: false\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n          this.props.onSignUpRequest(values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue(\"password\")) {\n        callback(\"Two passwords that you enter is inconsistent!\");\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields([\"confirm\"], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.register.isRegisterd) {\n      this.setState({\n        isReg: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      isReg: false\n    });\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(\"div\", {\n      className: \"regDiv\",\n      style: {\n        paddingTop: \"5rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(_Col, {\n      span: 13,\n      offset: 4,\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        marginTop: \"1rem\",\n        marginLeft: \"7rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(_Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      style: {\n        marginTop: \"2rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(_Form.Item, {\n      label: \"Full Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, getFieldDecorator(\"name\", {\n      rules: [{\n        message: \"The input is not valid E-mail!\"\n      }, {\n        required: true,\n        message: \"Please input your full name!\"\n      }]\n    })(React.createElement(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, getFieldDecorator(\"email\", {\n      rules: [{\n        type: \"email\",\n        message: \"The input is not valid E-mail!\"\n      }, {\n        required: true,\n        message: \"Please input your E-mail!\"\n      }]\n    })(React.createElement(_Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, getFieldDecorator(\"password\", {\n      rules: [{\n        required: true,\n        message: \"Please input your password!\"\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, getFieldDecorator(\"confirm\", {\n      rules: [{\n        required: true,\n        message: \"Please confirm your password!\"\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(_Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }))), React.createElement(_Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), getFieldDecorator(\"agreement\", {\n      valuePropName: \"checked\"\n    })(React.createElement(_Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(_Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Register\")))), this.props.register.isRegisterd && _message.success(\"Successfully Registered Please Log in to continue\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // dispatching actions returned by action creators\n    onSignUpRequest: values => dispatch(signUpRequest(values))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    register: state.register\n  };\n};\n\nconst WrappedRegistrationForm = _Form.create({\n  name: \"register\"\n})(RegistrationForm);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedRegistrationForm);","map":{"version":3,"sources":["/home/engintech/project/stonebird/Blotter/weerdboxbackend/client/src/containers/Register/index.js"],"names":["React","connect","signUpRequest","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","isReg","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","onSignUpRequest","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","componentDidMount","register","isRegisterd","componentWillUnmount","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","paddingTop","textAlign","marginTop","marginLeft","rules","message","required","type","validator","valuePropName","success","mapDispatchToProps","dispatch","mapStateToProps","WrappedRegistrationForm","create","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form, Input, Row, Col, Checkbox, Button, message } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { signUpRequest } from \"./actions\";\nimport \"./styles.css\";\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n    isReg: false\n  };\n\n  // componentWillReceiveProps(nextProps) {\n  //   if (nextProps.register && nextProps.register.isRegisterd) {\n  //     message.success(\"Registered Successfully, Please login to continue\");\n  //     console.log(nextProps);\n  //     window.location.replace(\"/login\");\n  //   }\n  // }\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log(\"Received values of form: \", values);\n        this.props.onSignUpRequest(values);\n      }\n    });\n  };\n  componentDidMount() {\n    if (this.props.register.isRegisterd) {\n      this.setState({ isReg: true });\n    }\n  }\n  componentWillUnmount() {\n    this.setState({ isReg: false });\n  }\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue(\"password\")) {\n      callback(\"Two passwords that you enter is inconsistent!\");\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields([\"confirm\"], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return (\n      <div className=\"regDiv\" style={{ paddingTop: \"5rem\" }}>\n        <Row>\n          <Col span={13} offset={4} style={{ textAlign: \"center\" }}>\n            <h1 style={{ marginTop: \"1rem\", marginLeft: \"7rem\" }}>Register</h1>\n            <div>\n              <Form\n                {...formItemLayout}\n                onSubmit={this.handleSubmit}\n                style={{ marginTop: \"2rem\" }}\n              >\n                <Form.Item label=\"Full Name\">\n                  {getFieldDecorator(\"name\", {\n                    rules: [\n                      {\n                        message: \"The input is not valid E-mail!\"\n                      },\n                      {\n                        required: true,\n                        message: \"Please input your full name!\"\n                      }\n                    ]\n                  })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"E-mail\">\n                  {getFieldDecorator(\"email\", {\n                    rules: [\n                      {\n                        type: \"email\",\n                        message: \"The input is not valid E-mail!\"\n                      },\n                      {\n                        required: true,\n                        message: \"Please input your E-mail!\"\n                      }\n                    ]\n                  })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                  {getFieldDecorator(\"password\", {\n                    rules: [\n                      {\n                        required: true,\n                        message: \"Please input your password!\"\n                      },\n                      {\n                        validator: this.validateToNextPassword\n                      }\n                    ]\n                  })(<Input.Password />)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                  {getFieldDecorator(\"confirm\", {\n                    rules: [\n                      {\n                        required: true,\n                        message: \"Please confirm your password!\"\n                      },\n                      {\n                        validator: this.compareToFirstPassword\n                      }\n                    ]\n                  })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                  {getFieldDecorator(\"agreement\", {\n                    valuePropName: \"checked\"\n                  })(\n                    <Checkbox>\n                      I have read the <a href=\"\">agreement</a>\n                    </Checkbox>\n                  )}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Register\n                  </Button>\n                </Form.Item>\n              </Form>\n            </div>\n            {this.props.register.isRegisterd &&\n              message.success(\n                \"Successfully Registered Please Log in to continue\"\n              )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // dispatching actions returned by action creators\n    onSignUpRequest: values => dispatch(signUpRequest(values))\n  };\n};\nconst mapStateToProps = state => {\n  return {\n    register: state.register\n  };\n};\nconst WrappedRegistrationForm = Form.create({ name: \"register\" })(\n  RegistrationForm\n);\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WrappedRegistrationForm);\n"]},"metadata":{},"sourceType":"module"}