{"ast":null,"code":"var _jsxFileName = \"/home/engintech/project/stonebird/Blotter/weerdboxbackend/client/src/components/Uploader/index.js\";\nimport React, { Component } from \"react\";\nimport uploadcare from \"uploadcare-widget\";\n\nclass Uploader extends Component {\n  componentDidMount() {\n    const widget = uploadcare.Widget(this.uploader);\n    const _this$props = this.props,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          onUploadComplete = _this$props.onUploadComplete;\n\n    if (typeof value !== \"undefined\") {\n      widget.value(value);\n    }\n\n    if (typeof onChange === \"function\") {\n      widget.onChange(files => {\n        if (files) {\n          this.files = this.files && this.files.files ? this.files.files() : [this.files];\n        } else {\n          this.files = null;\n        }\n\n        onChange(files);\n      });\n    }\n\n    if (typeof onUploadComplete === \"function\") {\n      widget.onUploadComplete(onUploadComplete);\n    }\n\n    widget.onDialogOpen(dialog => this.dialog = dialog);\n  }\n\n  componentWillUnmount() {\n    if (this.dialog) {\n      this.dialog.reject();\n    } // if (this.files) {\n    //   uploadcare.jQuery.when.apply(null, this.files).cancel();\n    // }\n\n\n    const widgetElement = uploadcare.jQuery(this.uploader).next(\".uploadcare--widget\");\n    const widget = widgetElement.data(\"uploadcareWidget\");\n\n    if (widget && widget.inputElement === this.uploader) {\n      widgetElement.remove();\n    }\n  }\n\n  getInputAttributes() {\n    const attributes = Object.assign({}, this.props);\n    delete attributes.value;\n    delete attributes.onChange;\n    delete attributes.onUploadComplete;\n    return attributes;\n  }\n\n  render() {\n    const attributes = this.getInputAttributes();\n    return React.createElement(\"input\", Object.assign({\n      type: \"hidden\",\n      ref: input => this.uploader = input\n    }, attributes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Uploader;","map":{"version":3,"sources":["/home/engintech/project/stonebird/Blotter/weerdboxbackend/client/src/components/Uploader/index.js"],"names":["React","Component","uploadcare","Uploader","componentDidMount","widget","Widget","uploader","props","value","onChange","onUploadComplete","files","onDialogOpen","dialog","componentWillUnmount","reject","widgetElement","jQuery","next","data","inputElement","remove","getInputAttributes","attributes","Object","assign","render","input"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAGH,UAAU,CAACI,MAAX,CAAkB,KAAKC,QAAvB,CAAf;AADkB,wBAE4B,KAAKC,KAFjC;AAAA,UAEVC,KAFU,eAEVA,KAFU;AAAA,UAEHC,QAFG,eAEHA,QAFG;AAAA,UAEOC,gBAFP,eAEOA,gBAFP;;AAIlB,QAAI,OAAOF,KAAP,KAAiB,WAArB,EAAkC;AAChCJ,MAAAA,MAAM,CAACI,KAAP,CAAaA,KAAb;AACD;;AACD,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClCL,MAAAA,MAAM,CAACK,QAAP,CAAgBE,KAAK,IAAI;AACvB,YAAIA,KAAJ,EAAW;AACT,eAAKA,KAAL,GACE,KAAKA,KAAL,IAAc,KAAKA,KAAL,CAAWA,KAAzB,GAAiC,KAAKA,KAAL,CAAWA,KAAX,EAAjC,GAAsD,CAAC,KAAKA,KAAN,CADxD;AAED,SAHD,MAGO;AACL,eAAKA,KAAL,GAAa,IAAb;AACD;;AAEDF,QAAAA,QAAQ,CAACE,KAAD,CAAR;AACD,OATD;AAUD;;AACD,QAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AAC1CN,MAAAA,MAAM,CAACM,gBAAP,CAAwBA,gBAAxB;AACD;;AACDN,IAAAA,MAAM,CAACQ,YAAP,CAAoBC,MAAM,IAAK,KAAKA,MAAL,GAAcA,MAA7C;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKD,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYE,MAAZ;AACD,KAHoB,CAIrB;AACA;AACA;;;AAEA,UAAMC,aAAa,GAAGf,UAAU,CAC7BgB,MADmB,CACZ,KAAKX,QADO,EAEnBY,IAFmB,CAEd,qBAFc,CAAtB;AAGA,UAAMd,MAAM,GAAGY,aAAa,CAACG,IAAd,CAAmB,kBAAnB,CAAf;;AAEA,QAAIf,MAAM,IAAIA,MAAM,CAACgB,YAAP,KAAwB,KAAKd,QAA3C,EAAqD;AACnDU,MAAAA,aAAa,CAACK,MAAd;AACD;AACF;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKlB,KAAvB,CAAnB;AAEA,WAAOgB,UAAU,CAACf,KAAlB;AACA,WAAOe,UAAU,CAACd,QAAlB;AACA,WAAOc,UAAU,CAACb,gBAAlB;AAEA,WAAOa,UAAP;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAMH,UAAU,GAAG,KAAKD,kBAAL,EAAnB;AAEA,WACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,GAAG,EAAEK,KAAK,IAAK,KAAKrB,QAAL,GAAgBqB;AAFjC,OAGMJ,UAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF;AAOD;;AAhE8B;;AAmEjC,eAAerB,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport uploadcare from \"uploadcare-widget\";\n\nclass Uploader extends Component {\n  componentDidMount() {\n    const widget = uploadcare.Widget(this.uploader);\n    const { value, onChange, onUploadComplete } = this.props;\n\n    if (typeof value !== \"undefined\") {\n      widget.value(value);\n    }\n    if (typeof onChange === \"function\") {\n      widget.onChange(files => {\n        if (files) {\n          this.files =\n            this.files && this.files.files ? this.files.files() : [this.files];\n        } else {\n          this.files = null;\n        }\n\n        onChange(files);\n      });\n    }\n    if (typeof onUploadComplete === \"function\") {\n      widget.onUploadComplete(onUploadComplete);\n    }\n    widget.onDialogOpen(dialog => (this.dialog = dialog));\n  }\n\n  componentWillUnmount() {\n    if (this.dialog) {\n      this.dialog.reject();\n    }\n    // if (this.files) {\n    //   uploadcare.jQuery.when.apply(null, this.files).cancel();\n    // }\n\n    const widgetElement = uploadcare\n      .jQuery(this.uploader)\n      .next(\".uploadcare--widget\");\n    const widget = widgetElement.data(\"uploadcareWidget\");\n\n    if (widget && widget.inputElement === this.uploader) {\n      widgetElement.remove();\n    }\n  }\n\n  getInputAttributes() {\n    const attributes = Object.assign({}, this.props);\n\n    delete attributes.value;\n    delete attributes.onChange;\n    delete attributes.onUploadComplete;\n\n    return attributes;\n  }\n\n  render() {\n    const attributes = this.getInputAttributes();\n\n    return (\n      <input\n        type=\"hidden\"\n        ref={input => (this.uploader = input)}\n        {...attributes}\n      />\n    );\n  }\n}\n\nexport default Uploader;\n"]},"metadata":{},"sourceType":"module"}